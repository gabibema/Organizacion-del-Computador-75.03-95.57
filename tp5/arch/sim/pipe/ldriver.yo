                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6d805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: c0f2f8ffffffffffffff |     iaddq $-8, %rdx         # len = len - 8
0x03c: 71dd01000000000000   | 	jle Continue           # si len > 0, continuar el ciclo
                            | 
                            | ########-----Loop Separator-------################################
                            | 
0x045:                      | Loop:
0x045: 50170000000000000000 | 	mrmovq (%rdi), %rcx	    
0x04f: c0f74800000000000000 | 	iaddq $72, %rdi		    
0x059: c0f64800000000000000 | 	iaddq $72, %rsi			
0x063: 5087c0ffffffffffffff | 	mrmovq -64(%rdi), %r8	
0x06d: 4016b8ffffffffffffff | 	rmmovq %rcx, -72(%rsi)  
0x077: 6211                 | 	andq %rcx, %rcx		    
0x079: 718c00000000000000   | 	jle LoopJmp1			
0x082: c0f00100000000000000 | 	iaddq $1, %rax		  
                            | 
0x08c:                      | LoopJmp1:
0x08c: 5097c8ffffffffffffff | 	mrmovq -56(%rdi), %r9   
0x096: 4086c0ffffffffffffff | 	rmmovq %r8, -64(%rsi)	
0x0a0: 6288                 | 	andq %r8, %r8			
0x0a2: 50a7d0ffffffffffffff | 	mrmovq -48(%rdi), %r10  
0x0ac: 71bf00000000000000   | 	jle LoopJmp2			
0x0b5: c0f00100000000000000 | 	iaddq $1, %rax			
                            | 
0x0bf:                      | LoopJmp2:
0x0bf: 4096c8ffffffffffffff | 	rmmovq %r9, -56(%rsi)   
0x0c9: 6299                 | 	andq %r9, %r9           
0x0cb: 50b7d8ffffffffffffff | 	mrmovq -40(%rdi), %r11  
0x0d5: 71e800000000000000   | 	jle LoopJmp3            
0x0de: c0f00100000000000000 | 	iaddq $1, %rax          
                            | 
0x0e8:                      | LoopJmp3:
0x0e8: 40a6d0ffffffffffffff | 	rmmovq %r10, -48(%rsi)  
0x0f2: 62aa                 | 	andq %r10, %r10         
0x0f4: 710701000000000000   | 	jle LoopJmp4            
0x0fd: c0f00100000000000000 | 	iaddq $1, %rax          
                            | 
0x107:                      | LoopJmp4:
0x107: 40b6d8ffffffffffffff | 	rmmovq %r11, -40(%rsi)  
0x111: 5087e0ffffffffffffff | 	mrmovq -32(%rdi), %r8   
0x11b: 62bb                 | 	andq %r11, %r11         
0x11d: 713001000000000000   | 	jle LoopJmp5
0x126: c0f00100000000000000 | 	iaddq $1, %rax          
                            | 
0x130:                      | LoopJmp5:
0x130: 4086e0ffffffffffffff | 	rmmovq %r8, -32(%rsi)  
0x13a: 6288                 | 	andq %r8, %r8           
0x13c: 5097e8ffffffffffffff | 	mrmovq -24(%rdi), %r9   
0x146: 715901000000000000   | 	jle LoopJmp6            
0x14f: c0f00100000000000000 | 	iaddq $1, %rax          
                            | 
0x159:                      | LoopJmp6:
0x159: 4096e8ffffffffffffff | 	rmmovq %r9, -24(%rsi)   
0x163: 50a7f0ffffffffffffff | 	mrmovq -16(%rdi), %r10  
0x16d: 6299                 | 	andq %r9, %r9           
0x16f: 718201000000000000   | 	jle LoopJmp7            
0x178: c0f00100000000000000 | 	iaddq $1, %rax          
                            | 
0x182:                      | LoopJmp7:
0x182: 40a6f0ffffffffffffff | 	rmmovq %r10, -16(%rsi)  
0x18c: 50b7f8ffffffffffffff | 	mrmovq -8(%rdi), %r11   
0x196: 62aa                 | 	andq %r10, %r10         
0x198: 71ab01000000000000   | 	jle LoopJmp8            
0x1a1: c0f00100000000000000 | 	iaddq $1, %rax          
                            | 
0x1ab:                      | LoopJmp8:
0x1ab: 40b6f8ffffffffffffff | 	rmmovq %r11, -8(%rsi)   
0x1b5: 62bb                 | 	andq %r11, %r11         
0x1b7: 71ca01000000000000   | 	jle LoopJmp9
0x1c0: c0f00100000000000000 | 	iaddq $1, %rax          
                            | 
0x1ca:                      | LoopJmp9:
0x1ca: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx		
0x1d4: 764500000000000000   | 	jg Loop					
                            | 
                            | ######################################################
                            | 
0x1dd:                      | Continue:
0x1dd: c0f20500000000000000 |     iaddq $5, %rdx
0x1e7: 720202000000000000   |     jl LessThan3
0x1f0: 762902000000000000   |     jg GreaterThan3
0x1f9: 704003000000000000   |     jmp RemAdd3
                            | 
0x202:                      | LessThan3:
0x202: c0f20200000000000000 |     iaddq $2, %rdx
0x20c: 739203000000000000   |     je RemAdd1
0x215: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x21f: 736903000000000000   |     je RemAdd2
0x228: 90                   |     ret
                            | 
0x229:                      | GreaterThan3:
0x229: c0f2fdffffffffffffff |     iaddq $-3, %rdx
0x233: 724e02000000000000   |     jl FourAndFive
0x23c: 766a02000000000000   |     jg SevenAndEight
0x245: 70c502000000000000   |     jmp RemAdd6
                            | 
0x24e:                      | FourAndFive:
0x24e: c0f20100000000000000 |     iaddq $1, %rdx
0x258: 721703000000000000   |     jl RemAdd4
0x261: 70ee02000000000000   |     jmp RemAdd5
                            | 
0x26a:                      | SevenAndEight:
0x26a: c0f2feffffffffffffff |     iaddq $-2, %rdx
0x274: 729c02000000000000   |     jl RemAdd7
0x27d: 708602000000000000   |     jmp RemAdd8
                            | 
                            | ###################################################
                            | 
0x286:                      | RemAdd8:
0x286: 50b73800000000000000 |     mrmovq 56(%rdi), %r11	
0x290: 40b63800000000000000 |     rmmovq %r11, 56(%rsi)	
0x29a: 62bb                 |     andq %r11, %r11			
                            | 
0x29c:                      | RemAdd7:
0x29c: 50873000000000000000 |     mrmovq 48(%rdi), %r8	
0x2a6: 71b902000000000000   |     jle RemAdd7Rax          
0x2af: c0f00100000000000000 |     iaddq $1, %rax			
0x2b9:                      | RemAdd7Rax:
0x2b9: 40863000000000000000 |     rmmovq %r8, 48(%rsi)	
0x2c3: 6288                 |     andq %r8, %r8			
                            | 
0x2c5:                      | RemAdd6:
0x2c5: 50972800000000000000 |     mrmovq 40(%rdi), %r9	
0x2cf: 71e202000000000000   |     jle RemAdd6Rax          
0x2d8: c0f00100000000000000 |     iaddq $1, %rax			
0x2e2:                      | RemAdd6Rax:
0x2e2: 40962800000000000000 |     rmmovq %r9, 40(%rsi)	
0x2ec: 6299                 |     andq %r9, %r9			
                            | 
0x2ee:                      | RemAdd5:
0x2ee: 50a72000000000000000 |     mrmovq 32(%rdi), %r10	
0x2f8: 710b03000000000000   |     jle RemAdd5Rax          
0x301: c0f00100000000000000 |     iaddq $1, %rax			
0x30b:                      | RemAdd5Rax:
0x30b: 40a62000000000000000 |     rmmovq %r10, 32(%rsi)	
0x315: 62aa                 |     andq %r10, %r10         
                            | 
0x317:                      | RemAdd4:
0x317: 50b71800000000000000 |     mrmovq 24(%rdi), %r11   
0x321: 713403000000000000   |     jle RemAdd4Rax          
0x32a: c0f00100000000000000 |     iaddq $1, %rax          
0x334:                      | RemAdd4Rax:
0x334: 40b61800000000000000 |     rmmovq %r11, 24(%rsi)	
0x33e: 62bb                 |     andq %r11, %r11         
                            | 
0x340:                      | RemAdd3:
0x340: 50871000000000000000 |     mrmovq 16(%rdi), %r8	
0x34a: 715d03000000000000   |     jle RemAdd3Rax          
0x353: c0f00100000000000000 |     iaddq $1, %rax          
0x35d:                      | RemAdd3Rax:
0x35d: 40861000000000000000 |     rmmovq %r8, 16(%rsi)	
0x367: 6288                 |     andq %r8, %r8           
                            | 
0x369:                      | RemAdd2:
0x369: 50970800000000000000 |     mrmovq 8(%rdi), %r9     
0x373: 718603000000000000   |     jle RemAdd2Rax          
0x37c: c0f00100000000000000 |     iaddq $1, %rax          
0x386:                      | RemAdd2Rax:
0x386: 40960800000000000000 |     rmmovq %r9, 8(%rsi)     
0x390: 6299                 |     andq %r9, %r9           
                            | 
0x392:                      | RemAdd1:
0x392: 50170000000000000000 |     mrmovq (%rdi), %rcx		
0x39c: 71af03000000000000   |      jle RemAdd1Rax         
0x3a5: c0f00100000000000000 |      iaddq $1, %rax         
0x3af:                      | RemAdd1Rax:
0x3af: 40160000000000000000 |     rmmovq %rcx, (%rsi)     
0x3b9: 6211                 |     andq %rcx, %rcx			
0x3bb: 71cf03000000000000   |     jle Done                
0x3c4: c0f00100000000000000 |     iaddq $1, %rax			
0x3ce: 90                   | 	ret
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3cf:                      | Done:
0x3cf: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3d0:                      | End:
                            | #/* $end ncopy-ys */EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3d0:                      | 	.align 8
0x3d0:                      | src:
0x3d0: ffffffffffffffff     | 	.quad -1
0x3d8: feffffffffffffff     | 	.quad -2
0x3e0: 0300000000000000     | 	.quad 3
0x3e8: 0400000000000000     | 	.quad 4
0x3f0: fbffffffffffffff     | 	.quad -5
0x3f8: 0600000000000000     | 	.quad 6
0x400: 0700000000000000     | 	.quad 7
0x408: 0800000000000000     | 	.quad 8
0x410: 0900000000000000     | 	.quad 9
0x418: f6ffffffffffffff     | 	.quad -10
0x420: 0b00000000000000     | 	.quad 11
0x428: 0c00000000000000     | 	.quad 12
0x430: 0d00000000000000     | 	.quad 13
0x438: f2ffffffffffffff     | 	.quad -14
0x440: f1ffffffffffffff     | 	.quad -15
0x448: 1000000000000000     | 	.quad 16
0x450: efffffffffffffff     | 	.quad -17
0x458: 1200000000000000     | 	.quad 18
0x460: edffffffffffffff     | 	.quad -19
0x468: ecffffffffffffff     | 	.quad -20
0x470: 1500000000000000     | 	.quad 21
0x478: 1600000000000000     | 	.quad 22
0x480: e9ffffffffffffff     | 	.quad -23
0x488: e8ffffffffffffff     | 	.quad -24
0x490: 1900000000000000     | 	.quad 25
0x498: e6ffffffffffffff     | 	.quad -26
0x4a0: 1b00000000000000     | 	.quad 27
0x4a8: e4ffffffffffffff     | 	.quad -28
0x4b0: 1d00000000000000     | 	.quad 29
0x4b8: 1e00000000000000     | 	.quad 30
0x4c0: e1ffffffffffffff     | 	.quad -31
0x4c8: e0ffffffffffffff     | 	.quad -32
0x4d0: 2100000000000000     | 	.quad 33
0x4d8: 2200000000000000     | 	.quad 34
0x4e0: 2300000000000000     | 	.quad 35
0x4e8: 2400000000000000     | 	.quad 36
0x4f0: dbffffffffffffff     | 	.quad -37
0x4f8: 2600000000000000     | 	.quad 38
0x500: d9ffffffffffffff     | 	.quad -39
0x508: 2800000000000000     | 	.quad 40
0x510: 2900000000000000     | 	.quad 41
0x518: d6ffffffffffffff     | 	.quad -42
0x520: d5ffffffffffffff     | 	.quad -43
0x528: 2c00000000000000     | 	.quad 44
0x530: 2d00000000000000     | 	.quad 45
0x538: 2e00000000000000     | 	.quad 46
0x540: d1ffffffffffffff     | 	.quad -47
0x548: 3000000000000000     | 	.quad 48
0x550: 3100000000000000     | 	.quad 49
0x558: 3200000000000000     | 	.quad 50
0x560: 3300000000000000     | 	.quad 51
0x568: ccffffffffffffff     | 	.quad -52
0x570: cbffffffffffffff     | 	.quad -53
0x578: caffffffffffffff     | 	.quad -54
0x580: c9ffffffffffffff     | 	.quad -55
0x588: c8ffffffffffffff     | 	.quad -56
0x590: c7ffffffffffffff     | 	.quad -57
0x598: c6ffffffffffffff     | 	.quad -58
0x5a0: c5ffffffffffffff     | 	.quad -59
0x5a8: c4ffffffffffffff     | 	.quad -60
0x5b0: c3ffffffffffffff     | 	.quad -61
0x5b8: c2ffffffffffffff     | 	.quad -62
0x5c0: c1ffffffffffffff     | 	.quad -63
0x5c8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x5d0:                      | 	.align 16
0x5d0:                      | Predest:
0x5d0: fadebc0000000000     | 	.quad 0xbcdefa
0x5d8:                      | dest:
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0:                      | Postdest:
0x7d0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x7d8:                      | .align 8
                            | # Run time stack
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
0x7e8: 0000000000000000     | 	.quad 0
0x7f0: 0000000000000000     | 	.quad 0
0x7f8: 0000000000000000     | 	.quad 0
0x800: 0000000000000000     | 	.quad 0
0x808: 0000000000000000     | 	.quad 0
0x810: 0000000000000000     | 	.quad 0
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
                            | 
0x858:                      | Stack:
