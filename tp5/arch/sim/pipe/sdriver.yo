                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f60804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: c0f2f8ffffffffffffff |     iaddq $-8, %rdx         # len = len - 8
0x03c: 71dd01000000000000   | 	jle Continue           # si len > 0, continuar el ciclo
                            | 
                            | ########-----Loop Separator-------################################
                            | 
0x045:                      | Loop:
0x045: 50170000000000000000 | 	mrmovq (%rdi), %rcx	    
0x04f: c0f74800000000000000 | 	iaddq $72, %rdi		    
0x059: c0f64800000000000000 | 	iaddq $72, %rsi			
0x063: 5087c0ffffffffffffff | 	mrmovq -64(%rdi), %r8	
0x06d: 4016b8ffffffffffffff | 	rmmovq %rcx, -72(%rsi)  
0x077: 6211                 | 	andq %rcx, %rcx		    
0x079: 718c00000000000000   | 	jle LoopJmp1			
0x082: c0f00100000000000000 | 	iaddq $1, %rax		  
                            | 
0x08c:                      | LoopJmp1:
0x08c: 5097c8ffffffffffffff | 	mrmovq -56(%rdi), %r9   
0x096: 4086c0ffffffffffffff | 	rmmovq %r8, -64(%rsi)	
0x0a0: 6288                 | 	andq %r8, %r8			
0x0a2: 50a7d0ffffffffffffff | 	mrmovq -48(%rdi), %r10  
0x0ac: 71bf00000000000000   | 	jle LoopJmp2			
0x0b5: c0f00100000000000000 | 	iaddq $1, %rax			
                            | 
0x0bf:                      | LoopJmp2:
0x0bf: 4096c8ffffffffffffff | 	rmmovq %r9, -56(%rsi)   
0x0c9: 6299                 | 	andq %r9, %r9           
0x0cb: 50b7d8ffffffffffffff | 	mrmovq -40(%rdi), %r11  
0x0d5: 71e800000000000000   | 	jle LoopJmp3            
0x0de: c0f00100000000000000 | 	iaddq $1, %rax          
                            | 
0x0e8:                      | LoopJmp3:
0x0e8: 40a6d0ffffffffffffff | 	rmmovq %r10, -48(%rsi)  
0x0f2: 62aa                 | 	andq %r10, %r10         
0x0f4: 710701000000000000   | 	jle LoopJmp4            
0x0fd: c0f00100000000000000 | 	iaddq $1, %rax          
                            | 
0x107:                      | LoopJmp4:
0x107: 40b6d8ffffffffffffff | 	rmmovq %r11, -40(%rsi)  
0x111: 5087e0ffffffffffffff | 	mrmovq -32(%rdi), %r8   
0x11b: 62bb                 | 	andq %r11, %r11         
0x11d: 713001000000000000   | 	jle LoopJmp5
0x126: c0f00100000000000000 | 	iaddq $1, %rax          
                            | 
0x130:                      | LoopJmp5:
0x130: 4086e0ffffffffffffff | 	rmmovq %r8, -32(%rsi)  
0x13a: 6288                 | 	andq %r8, %r8           
0x13c: 5097e8ffffffffffffff | 	mrmovq -24(%rdi), %r9   
0x146: 715901000000000000   | 	jle LoopJmp6            
0x14f: c0f00100000000000000 | 	iaddq $1, %rax          
                            | 
0x159:                      | LoopJmp6:
0x159: 4096e8ffffffffffffff | 	rmmovq %r9, -24(%rsi)   
0x163: 50a7f0ffffffffffffff | 	mrmovq -16(%rdi), %r10  
0x16d: 6299                 | 	andq %r9, %r9           
0x16f: 718201000000000000   | 	jle LoopJmp7            
0x178: c0f00100000000000000 | 	iaddq $1, %rax          
                            | 
0x182:                      | LoopJmp7:
0x182: 40a6f0ffffffffffffff | 	rmmovq %r10, -16(%rsi)  
0x18c: 50b7f8ffffffffffffff | 	mrmovq -8(%rdi), %r11   
0x196: 62aa                 | 	andq %r10, %r10         
0x198: 71ab01000000000000   | 	jle LoopJmp8            
0x1a1: c0f00100000000000000 | 	iaddq $1, %rax          
                            | 
0x1ab:                      | LoopJmp8:
0x1ab: 40b6f8ffffffffffffff | 	rmmovq %r11, -8(%rsi)   
0x1b5: 62bb                 | 	andq %r11, %r11         
0x1b7: 71ca01000000000000   | 	jle LoopJmp9
0x1c0: c0f00100000000000000 | 	iaddq $1, %rax          
                            | 
0x1ca:                      | LoopJmp9:
0x1ca: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx		
0x1d4: 764500000000000000   | 	jg Loop					
                            | 
                            | ######################################################
                            | 
0x1dd:                      | Continue:
0x1dd: c0f20500000000000000 |     iaddq $5, %rdx
0x1e7: 720202000000000000   |     jl LessThan3
0x1f0: 762902000000000000   |     jg GreaterThan3
0x1f9: 704003000000000000   |     jmp RemAdd3
                            | 
0x202:                      | LessThan3:
0x202: c0f20200000000000000 |     iaddq $2, %rdx
0x20c: 739203000000000000   |     je RemAdd1
0x215: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x21f: 736903000000000000   |     je RemAdd2
0x228: 90                   |     ret
                            | 
0x229:                      | GreaterThan3:
0x229: c0f2fdffffffffffffff |     iaddq $-3, %rdx
0x233: 724e02000000000000   |     jl FourAndFive
0x23c: 766a02000000000000   |     jg SevenAndEight
0x245: 70c502000000000000   |     jmp RemAdd6
                            | 
0x24e:                      | FourAndFive:
0x24e: c0f20100000000000000 |     iaddq $1, %rdx
0x258: 721703000000000000   |     jl RemAdd4
0x261: 70ee02000000000000   |     jmp RemAdd5
                            | 
0x26a:                      | SevenAndEight:
0x26a: c0f2feffffffffffffff |     iaddq $-2, %rdx
0x274: 729c02000000000000   |     jl RemAdd7
0x27d: 708602000000000000   |     jmp RemAdd8
                            | 
                            | ###################################################
                            | 
0x286:                      | RemAdd8:
0x286: 50b73800000000000000 |     mrmovq 56(%rdi), %r11	
0x290: 40b63800000000000000 |     rmmovq %r11, 56(%rsi)	
0x29a: 62bb                 |     andq %r11, %r11			
                            | 
0x29c:                      | RemAdd7:
0x29c: 50873000000000000000 |     mrmovq 48(%rdi), %r8	
0x2a6: 71b902000000000000   |     jle RemAdd7Rax          
0x2af: c0f00100000000000000 |     iaddq $1, %rax			
0x2b9:                      | RemAdd7Rax:
0x2b9: 40863000000000000000 |     rmmovq %r8, 48(%rsi)	
0x2c3: 6288                 |     andq %r8, %r8			
                            | 
0x2c5:                      | RemAdd6:
0x2c5: 50972800000000000000 |     mrmovq 40(%rdi), %r9	
0x2cf: 71e202000000000000   |     jle RemAdd6Rax          
0x2d8: c0f00100000000000000 |     iaddq $1, %rax			
0x2e2:                      | RemAdd6Rax:
0x2e2: 40962800000000000000 |     rmmovq %r9, 40(%rsi)	
0x2ec: 6299                 |     andq %r9, %r9			
                            | 
0x2ee:                      | RemAdd5:
0x2ee: 50a72000000000000000 |     mrmovq 32(%rdi), %r10	
0x2f8: 710b03000000000000   |     jle RemAdd5Rax          
0x301: c0f00100000000000000 |     iaddq $1, %rax			
0x30b:                      | RemAdd5Rax:
0x30b: 40a62000000000000000 |     rmmovq %r10, 32(%rsi)	
0x315: 62aa                 |     andq %r10, %r10         
                            | 
0x317:                      | RemAdd4:
0x317: 50b71800000000000000 |     mrmovq 24(%rdi), %r11   
0x321: 713403000000000000   |     jle RemAdd4Rax          
0x32a: c0f00100000000000000 |     iaddq $1, %rax          
0x334:                      | RemAdd4Rax:
0x334: 40b61800000000000000 |     rmmovq %r11, 24(%rsi)	
0x33e: 62bb                 |     andq %r11, %r11         
                            | 
0x340:                      | RemAdd3:
0x340: 50871000000000000000 |     mrmovq 16(%rdi), %r8	
0x34a: 715d03000000000000   |     jle RemAdd3Rax          
0x353: c0f00100000000000000 |     iaddq $1, %rax          
0x35d:                      | RemAdd3Rax:
0x35d: 40861000000000000000 |     rmmovq %r8, 16(%rsi)	
0x367: 6288                 |     andq %r8, %r8           
                            | 
0x369:                      | RemAdd2:
0x369: 50970800000000000000 |     mrmovq 8(%rdi), %r9     
0x373: 718603000000000000   |     jle RemAdd2Rax          
0x37c: c0f00100000000000000 |     iaddq $1, %rax          
0x386:                      | RemAdd2Rax:
0x386: 40960800000000000000 |     rmmovq %r9, 8(%rsi)     
0x390: 6299                 |     andq %r9, %r9           
                            | 
0x392:                      | RemAdd1:
0x392: 50170000000000000000 |     mrmovq (%rdi), %rcx		
0x39c: 71af03000000000000   |      jle RemAdd1Rax         
0x3a5: c0f00100000000000000 |      iaddq $1, %rax         
0x3af:                      | RemAdd1Rax:
0x3af: 40160000000000000000 |     rmmovq %rcx, (%rsi)     
0x3b9: 6211                 |     andq %rcx, %rcx			
0x3bb: 71cf03000000000000   |     jle Done                
0x3c4: c0f00100000000000000 |     iaddq $1, %rax			
0x3ce: 90                   | 	ret
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3cf:                      | Done:
0x3cf: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3d0:                      | End:
                            | #/* $end ncopy-ys */EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3d0:                      | 	.align 8
0x3d0:                      | src:
0x3d0: 0100000000000000     | 	.quad 1
0x3d8: feffffffffffffff     | 	.quad -2
0x3e0: fdffffffffffffff     | 	.quad -3
0x3e8: 0400000000000000     | 	.quad 4
0x3f0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x400:                      | 	.align 16
0x400:                      | Predest:
0x400: fadebc0000000000     | 	.quad 0xbcdefa
0x408:                      | dest:
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428:                      | Postdest:
0x428: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x430:                      | .align 8
                            | # Run time stack
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
                            | 
0x4b0:                      | Stack:
