		.pos 0
		irmovq stack, %rsp
		call main
		halt
		
                .align 8
# Source block
src:
		.quad 0x00a
		.quad 0x0b0
		.quad 0xc00

# Destination block
dest:
		.quad 0x111
		.quad 0x222
		.quad 0x333


main:
		irmovq src, %rdi                # primer argumento, src
		irmovq dest, %rsi               # segundo argumento, dest
		irmovq $3, %rdx                 # tercer argumento, 3
		call copy_block                 # copy_block(src, dest, 3)
		ret



copy_block:
		irmovq $1, %rcx                 
		irmovq $8, %r8                 
		irmovq $0, %rax                 
		jmp test
loop:
		mrmovq 0(%rdi), %r9             
		addq %r8, %rdi                  
		rmmovq %r9, (%rsi)              # escribe el valor en el destino
		addq %r8, %rsi                  # dest++
		xorq %r9, %rax                  
		subq %rcx, %rdx                
test:
		andq %rdx, %rdx                 
		jg loop                         # para cuando es 0
		ret                             # Return


		.pos 0x300
stack:
